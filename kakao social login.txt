1. build.gradle(project) 에
subprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://devrepo.kakao.com/nexus/content/groups/public/' }
    }
}
추가

2. build.gradle(app) 에

    implementation group: 'com.kakao.sdk', name: 'usermgmt', version: '1.30.4'
추가

3. 인터넷 권한 추가

4. 카카오 어댑터 클래스 생성
package com.example.myapplication

import android.app.Application
import com.kakao.auth.*

class GlobalApplication : Application() {

    private object KakaoSDKAdapter : KakaoAdapter() {
        /**
         * Session Config에 대해서는 default값들이 존재한다.
         * 필요한 상황에서만 override해서 사용하면 됨.
         * @return Session의 설정값.
         */
        override fun getSessionConfig(): ISessionConfig {
            return object : ISessionConfig {
                override fun getAuthTypes(): Array<AuthType> {
                    return arrayOf(AuthType.KAKAO_LOGIN_ALL)
                    // 로그인을 하는 방식을 지정하는 부분.
                    // AuthType 로는 다음 네 가지 방식이 있다.
                    // KAKAO_TALK:
                    // 카카오톡으로 로그인, KAKAO_STORY: 카카오스토리로 로그인
                    // KAKAO_ACCOUNT:
                    // 웹뷰를 통한 로그인,
                    // KAKAO_TALK_EXCLUDE_NATIVE_LOGIN:
                    // 카카오톡으로만 로그인+계정 없으면 계정생성 버튼 제공
                    // KAKAO_LOGIN_ALL:
                    // 모든 로그인방식 사용 가능.
                    // 정확히는, 카카오톡이나 카카오스토리가 있으면 그 쪽으로 로그인 기능을 제공하고,
                    // 둘 다 없으면 웹뷰를 통한 로그인을 제공한다
                }

                override fun isUsingWebviewTimer(): Boolean {
                    return false
                    // SDK 로그인시 사용되는 WebView 에서
                    // pause 와 resume 시에 Timer 를 설정하여 CPU소모를 절약한다.
                    // true 를 리턴할경우 webview 로그인을 사용하는 화면에서
                    // 모든 webview 에 onPause 와 onResume 시에 Timer 를 설정해 주어야 한다.
                    // 지정하지 않을 시 false 로 설정된다.
                }

                override fun isSecureMode(): Boolean {
                    return false
                    // 로그인시 access token과 refresh token을 저장할 때의 암호화 여부를 결정한다.
                }

                override fun getApprovalType(): ApprovalType? {
                    return ApprovalType.INDIVIDUAL
                    // 일반 사용자가 아닌 Kakao와 제휴된 앱에서만 사용되는 값으로,
                    // 값을 채워주지 않을경우 ApprovalType.INDIVIDUAL 값을 사용하게 된다.
                }

                override fun isSaveFormData(): Boolean {
                    return true
                    // Kakao SDK 에서 사용되는 WebView에서
                    // email 입력폼의 데이터를 저장할지 여부를 결정한다.
                    // true일 경우, 다음번에 다시 로그인 시 email 폼을 누르면
                    // 이전에 입력했던 이메일이 나타난다.
                }
            }
        }

        override fun getApplicationConfig(): IApplicationConfig {
            return IApplicationConfig { getGlobalApplicationContext()?.applicationContext!! }
        }
    }

    companion object {
        var instance: GlobalApplication? = null

        fun getGlobalApplicationContext() : GlobalApplication? {
            checkNotNull(this) { "this application does not inherit com.kakao.GlobalApplication" }
            return instance
        }
    }

    override fun onCreate() {
        super.onCreate()
        instance = this
        KakaoSDK.init(KakaoSDKAdapter)
    }

    override fun onTerminate() {
        super.onTerminate()
        instance = null
    }
}

5. menifest
             	android:name=".GlobalApplication"
      	 android:allowBackup="true"
추가

6. 카카오 개발자 페이지 들어간후
https://developers.kakao.com/console/app/529365/config/platform
키값 생성

7. 안드로이드 플랫폼 추가

8. hash값 출력
package com.example.myapplication;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;

import java.security.MessageDigest;

public class FindHash extends AppCompatActivity {
    private Context mContext;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_find_hash);

        mContext = getApplicationContext();
        getHashKey(mContext);

    }
    @Nullable

    public static String getHashKey(Context context) {

        final String TAG = "KeyHash";

        String keyHash = null;

        try {

            PackageInfo info =

                    context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_SIGNATURES);



            for (Signature signature : info.signatures) {

                MessageDigest md;

                md = MessageDigest.getInstance("SHA");

                md.update(signature.toByteArray());

                keyHash = new String(Base64.encode(md.digest(), 0));

                Log.d(TAG, keyHash);

            }

        } catch (Exception e) {

            Log.e("name not found", e.toString());

        }



        if (keyHash != null) {

            return keyHash;

        } else {

            return null;

        }

    }
}

9. 해쉬값 이용하여 안드로이드 플랫폼 추가

10. 로그인 화면
package com.example.myapplication

import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.media.tv.TvContract.Programs.Genres.encode
import android.net.Uri.encode
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Base64
import android.util.Base64.NO_WRAP
import android.util.Log
import android.widget.Toast
import com.kakao.auth.ISessionCallback
import com.kakao.auth.Session
import com.kakao.network.ErrorResult
import com.kakao.usermgmt.UserManagement
import com.kakao.usermgmt.callback.MeV2ResponseCallback
import com.kakao.usermgmt.response.MeV2Response
import com.kakao.util.exception.KakaoException
import com.kakao.util.helper.Utility.getPackageInfo
import java.security.MessageDigest
import java.security.NoSuchAlgorithmException

class LoginActivity : AppCompatActivity() {

    private lateinit var callback: SessionCallback

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_login)

        callback = SessionCallback()
        Session.getCurrentSession().addCallback(callback)
        Session.getCurrentSession().checkAndImplicitOpen()

    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {

        if (Session.getCurrentSession().handleActivityResult(requestCode, resultCode, data)) {
            return
        }
        super.onActivityResult(requestCode, resultCode, data)
    }

    override fun onDestroy() {
        super.onDestroy()
        Session.getCurrentSession().removeCallback(callback)
    }




    private inner class SessionCallback : ISessionCallback {
        override fun onSessionOpened() {
            // 로그인 세션이 열렸을 때
            UserManagement.getInstance().me( object : MeV2ResponseCallback() {
                override fun onSuccess(result: MeV2Response?) {
                    // 로그인이 성공했을 때
                    var intent = Intent(this@LoginActivity, LoginTestMainActivity::class.java)
                    intent.putExtra("name", result!!.getNickname())
                    intent.putExtra("profile", result!!.getProfileImagePath())
                    startActivity(intent)
                    finish()
                }

                override fun onSessionClosed(errorResult: ErrorResult?) {
                    // 로그인 도중 세션이 비정상적인 이유로 닫혔을 때
                    Toast.makeText(
                        this@LoginActivity,
                        "세션이 닫혔습니다. 다시 시도해주세요 : ${errorResult.toString()}",
                        Toast.LENGTH_SHORT).show()
                }
            })
        }
        override fun onSessionOpenFailed(exception: KakaoException?) {
            // 로그인 세션이 정상적으로 열리지 않았을 때
            if (exception != null) {
                com.kakao.util.helper.log.Logger.e(exception)
                Toast.makeText(
                    this@LoginActivity,
                    "로그인 도중 오류가 발생했습니다. 인터넷 연결을 확인해주세요 : $exception",
                    Toast.LENGTH_SHORT).show()
            }
        }

    }

    private fun redirectSignupActivity() {
        val intent = Intent(this, LoginActivity::class.java)
        startActivity(intent)
        finish()
    }

}

11. 로그인 버튼 xml
<com.kakao.usermgmt.LoginButton
        android:id="@+id/com_kakao_login"
        android:layout_width="0dp"
        android:layout_weight="1"
        android:layout_height="wrap_content"
        android:layout_marginLeft="20dp"
        android:layout_marginRight="20dp"
        android:layout_marginBottom="30dp" />

12. 로그아웃 및 넘긴 정보
package com.example.myapplication

import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import androidx.appcompat.app.AlertDialog
import com.bumptech.glide.Glide
import com.kakao.usermgmt.UserManagement
import com.kakao.usermgmt.callback.LogoutResponseCallback
import kotlinx.android.synthetic.main.activity_login_test_main.*

class LoginTestMainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_login_test_main)

        tvNickname.text = intent.getStringExtra("name")
        tvProfile.text = intent.getStringExtra("profile")
        Glide.with(this)
            .load(intent.getStringExtra("profile"))
            .into(img)
        btn_logout.setOnClickListener {
            val builder = AlertDialog.Builder(this)
            builder.setMessage("로그아웃 하시겠습니까?")
            builder.setPositiveButton("확인") { dialogInterface, i ->
                UserManagement.getInstance().requestLogout(object : LogoutResponseCallback() {
                    override fun onCompleteLogout() {}
                })
                val intent = Intent(this, LoginActivity::class.java)
                dialogInterface.dismiss()
                startActivity(intent)
            }
            builder.setNegativeButton("취소"){
                dialogInterface, i -> dialogInterface.dismiss()
            }
            val dialog:AlertDialog=builder.create()
            dialog.show()
        }
    }
}

